-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_elem_0_0_0_0_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
    layer2_out_din : OUT STD_LOGIC_VECTOR (319 downto 0);
    layer2_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer2_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer2_out_full_n : IN STD_LOGIC;
    layer2_out_write : OUT STD_LOGIC;
    layer2_out_blk_n : OUT STD_LOGIC );
end;


architecture behav of myproject_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv320_lc_1 : STD_LOGIC_VECTOR (319 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal icmp_ln289_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln289_1_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_start : STD_LOGIC;
    signal call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_done : STD_LOGIC;
    signal call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_idle : STD_LOGIC;
    signal call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_ready : STD_LOGIC;
    signal select_ln323_fu_218_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_67_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op17_write_state1 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln313_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln317_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_ignore_call2 : BOOLEAN;
    signal select_ln328_fu_162_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln317_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln313_fu_138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln289_2_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_3_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln289_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_1_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln328_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln323_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln323_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_condition_120 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_elem_0_0_0_0_0_val : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74 : component myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_start,
        ap_done => call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_done,
        ap_idle => call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_idle,
        ap_ready => call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_ready,
        in_elem_0_0_0_0_0_val => in_elem_0_0_0_0_0_val);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln313_fu_144_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln313_fu_144_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln313_fu_138_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_120)) then
                if ((icmp_ln317_fu_194_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln317_fu_194_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln317_fu_188_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln313_fu_144_p2 = ap_const_lv1_1)) then 
                    sX <= ap_const_lv32_0;
                elsif ((icmp_ln313_fu_144_p2 = ap_const_lv1_0)) then 
                    sX <= select_ln328_fu_162_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln313_fu_144_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sY <= ap_phi_mux_storemerge_phi_fu_67_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln313_fu_138_p2 <= std_logic_vector(unsigned(pX) + unsigned(ap_const_lv32_1));
    add_ln317_fu_188_p2 <= std_logic_vector(unsigned(pY) + unsigned(ap_const_lv32_1));
    add_ln323_fu_212_p2 <= std_logic_vector(unsigned(sY) + unsigned(ap_const_lv32_1));
    add_ln328_fu_156_p2 <= std_logic_vector(unsigned(sX) + unsigned(ap_const_lv32_1));
    and_ln289_1_fu_132_p2 <= (icmp_ln289_1_fu_108_p2 and and_ln289_fu_126_p2);
    and_ln289_fu_126_p2 <= (icmp_ln289_3_fu_120_p2 and icmp_ln289_2_fu_114_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, layer2_out_full_n, ap_predicate_op17_write_state1)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or ((ap_predicate_op17_write_state1 = ap_const_boolean_1) and (layer2_out_full_n = ap_const_logic_0)));
    end process;


    ap_block_state1_ignore_call2_assign_proc : process(ap_start, layer2_out_full_n, ap_predicate_op17_write_state1)
    begin
                ap_block_state1_ignore_call2 <= ((ap_start = ap_const_logic_0) or ((ap_predicate_op17_write_state1 = ap_const_boolean_1) and (layer2_out_full_n = ap_const_logic_0)));
    end process;


    ap_condition_120_assign_proc : process(ap_CS_fsm_state1, ap_block_state1, icmp_ln313_fu_144_p2)
    begin
                ap_condition_120 <= ((icmp_ln313_fu_144_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_67_p4_assign_proc : process(ap_CS_fsm_state1, select_ln323_fu_218_p3, icmp_ln313_fu_144_p2, icmp_ln317_fu_194_p2)
    begin
        if (((icmp_ln313_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((icmp_ln317_fu_194_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge_phi_fu_67_p4 <= ap_const_lv32_0;
            elsif ((icmp_ln317_fu_194_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge_phi_fu_67_p4 <= select_ln323_fu_218_p3;
            else 
                ap_phi_mux_storemerge_phi_fu_67_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge_phi_fu_67_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_predicate_op17_write_state1_assign_proc : process(icmp_ln289_fu_90_p2, and_ln289_1_fu_132_p2)
    begin
                ap_predicate_op17_write_state1 <= ((ap_const_lv1_1 = and_ln289_1_fu_132_p2) and (icmp_ln289_fu_90_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_start_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_ignore_call2)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_ignore_call2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_start <= ap_const_logic_1;
        else 
            call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln289_1_fu_108_p2 <= "1" when (sY = ap_const_lv32_3) else "0";
    icmp_ln289_2_fu_114_p2 <= "1" when (signed(pY) > signed(ap_const_lv32_2)) else "0";
    icmp_ln289_3_fu_120_p2 <= "1" when (signed(pX) > signed(ap_const_lv32_8)) else "0";
    icmp_ln289_fu_90_p2 <= "1" when (sX = ap_const_lv32_9) else "0";
    icmp_ln313_fu_144_p2 <= "1" when (add_ln313_fu_138_p2 = ap_const_lv32_100) else "0";
    icmp_ln317_fu_194_p2 <= "1" when (add_ln317_fu_188_p2 = ap_const_lv32_4) else "0";
    icmp_ln323_fu_206_p2 <= "1" when (sY = ap_const_lv32_3) else "0";

    layer2_out_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, layer2_out_full_n, icmp_ln289_fu_90_p2, and_ln289_1_fu_132_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_lv1_1 = and_ln289_1_fu_132_p2) and (icmp_ln289_fu_90_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer2_out_blk_n <= layer2_out_full_n;
        else 
            layer2_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer2_out_din <= ap_const_lv320_lc_1;

    layer2_out_write_assign_proc : process(ap_CS_fsm_state1, ap_predicate_op17_write_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_predicate_op17_write_state1 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer2_out_write <= ap_const_logic_1;
        else 
            layer2_out_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln323_fu_218_p3 <= 
        ap_const_lv32_3 when (icmp_ln323_fu_206_p2(0) = '1') else 
        add_ln323_fu_212_p2;
    select_ln328_fu_162_p3 <= 
        ap_const_lv32_9 when (icmp_ln289_fu_90_p2(0) = '1') else 
        add_ln328_fu_156_p2;
end behav;
