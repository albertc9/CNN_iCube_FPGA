-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_10u_array_ap_fixed_16_6_5_3_0_10u_relu_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer4_out_dout : IN STD_LOGIC_VECTOR (159 downto 0);
    layer4_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer4_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer4_out_empty_n : IN STD_LOGIC;
    layer4_out_read : OUT STD_LOGIC;
    layer5_out_din : OUT STD_LOGIC_VECTOR (159 downto 0);
    layer5_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer5_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer5_out_full_n : IN STD_LOGIC;
    layer5_out_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_10u_array_ap_fixed_16_6_5_3_0_10u_relu_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_EE : STD_LOGIC_VECTOR (7 downto 0) := "11101110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln41_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer4_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer5_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal out_data_8_fu_336_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_8_reg_536 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_10_fu_350_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_10_reg_541 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_12_fu_364_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_12_reg_546 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_14_fu_378_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_14_reg_551 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_fu_392_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_reg_556 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_16_fu_406_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_16_reg_561 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_17_fu_420_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_17_reg_566 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_18_fu_434_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_18_reg_571 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_19_fu_448_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_19_reg_576 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_20_fu_462_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_20_reg_581 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_fu_100 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_4_fu_131_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal in_data_fu_142_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_45_fu_146_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_10_fu_150_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_20_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_s_fu_160_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_11_fu_170_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_21_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_35_fu_180_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_12_fu_190_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_22_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_36_fu_200_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_23_fu_210_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_23_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_37_fu_220_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_24_fu_230_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_24_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_38_fu_240_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_25_fu_250_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_25_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_39_fu_260_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_26_fu_270_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_26_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_40_fu_280_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_27_fu_290_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_27_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_41_fu_300_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_28_fu_310_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_28_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_42_fu_320_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln51_18_fu_494_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_17_fu_491_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_16_fu_488_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_15_fu_485_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_fu_482_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_6_fu_479_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_5_fu_476_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_4_fu_473_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_fu_470_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln57_s_fu_497_p11 : STD_LOGIC_VECTOR (158 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_119 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component myproject_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_119)) then
                if ((icmp_ln41_fu_125_p2 = ap_const_lv1_0)) then 
                    i_fu_100 <= i_4_fu_131_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_100 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                out_data_10_reg_541 <= out_data_10_fu_350_p3;
                out_data_12_reg_546 <= out_data_12_fu_364_p3;
                out_data_14_reg_551 <= out_data_14_fu_378_p3;
                out_data_8_reg_536 <= out_data_8_fu_336_p3;
                select_ln51_16_reg_561 <= select_ln51_16_fu_406_p3;
                select_ln51_17_reg_566 <= select_ln51_17_fu_420_p3;
                select_ln51_18_reg_571 <= select_ln51_18_fu_434_p3;
                select_ln51_19_reg_576 <= select_ln51_19_fu_448_p3;
                select_ln51_20_reg_581 <= select_ln51_20_fu_462_p3;
                select_ln51_reg_556 <= select_ln51_fu_392_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(layer4_out_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (layer4_out_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(layer5_out_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (layer5_out_full_n = ap_const_logic_0);
    end process;


    ap_condition_119_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_119 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln41_fu_125_p2, ap_start_int)
    begin
        if (((icmp_ln41_fu_125_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_100, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_100;
        end if; 
    end process;

    i_4_fu_131_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv8_1));
    icmp_ln41_fu_125_p2 <= "1" when (ap_sig_allocacmp_i_3 = ap_const_lv8_EE) else "0";
    icmp_ln51_20_fu_344_p2 <= "1" when (signed(in_data_10_fu_150_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_21_fu_358_p2 <= "1" when (signed(in_data_11_fu_170_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_22_fu_372_p2 <= "1" when (signed(in_data_12_fu_190_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_23_fu_386_p2 <= "1" when (signed(trunc_ln44_23_fu_210_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_24_fu_400_p2 <= "1" when (signed(trunc_ln44_24_fu_230_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_25_fu_414_p2 <= "1" when (signed(trunc_ln44_25_fu_250_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_26_fu_428_p2 <= "1" when (signed(trunc_ln44_26_fu_270_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_27_fu_442_p2 <= "1" when (signed(trunc_ln44_27_fu_290_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_28_fu_456_p2 <= "1" when (signed(trunc_ln44_28_fu_310_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_fu_330_p2 <= "1" when (signed(in_data_fu_142_p1) > signed(ap_const_lv16_0)) else "0";
    in_data_10_fu_150_p4 <= layer4_out_dout(31 downto 16);
    in_data_11_fu_170_p4 <= layer4_out_dout(47 downto 32);
    in_data_12_fu_190_p4 <= layer4_out_dout(63 downto 48);
    in_data_fu_142_p1 <= layer4_out_dout(16 - 1 downto 0);

    layer4_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer4_out_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer4_out_blk_n <= layer4_out_empty_n;
        else 
            layer4_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer4_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer4_out_read <= ap_const_logic_1;
        else 
            layer4_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer5_out_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, layer5_out_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer5_out_blk_n <= layer5_out_full_n;
        else 
            layer5_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer5_out_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln57_s_fu_497_p11),160));

    layer5_out_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer5_out_write <= ap_const_logic_1;
        else 
            layer5_out_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln57_s_fu_497_p11 <= (((((((((select_ln51_20_reg_581 & zext_ln51_18_fu_494_p1) & zext_ln51_17_fu_491_p1) & zext_ln51_16_fu_488_p1) & zext_ln51_15_fu_485_p1) & zext_ln51_fu_482_p1) & zext_ln45_6_fu_479_p1) & zext_ln45_5_fu_476_p1) & zext_ln45_4_fu_473_p1) & zext_ln45_fu_470_p1);
    out_data_10_fu_350_p3 <= 
        trunc_ln44_s_fu_160_p4 when (icmp_ln51_20_fu_344_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_12_fu_364_p3 <= 
        trunc_ln44_35_fu_180_p4 when (icmp_ln51_21_fu_358_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_14_fu_378_p3 <= 
        trunc_ln44_36_fu_200_p4 when (icmp_ln51_22_fu_372_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_8_fu_336_p3 <= 
        trunc_ln44_45_fu_146_p1 when (icmp_ln51_fu_330_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_16_fu_406_p3 <= 
        trunc_ln44_38_fu_240_p4 when (icmp_ln51_24_fu_400_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_17_fu_420_p3 <= 
        trunc_ln44_39_fu_260_p4 when (icmp_ln51_25_fu_414_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_18_fu_434_p3 <= 
        trunc_ln44_40_fu_280_p4 when (icmp_ln51_26_fu_428_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_19_fu_448_p3 <= 
        trunc_ln44_41_fu_300_p4 when (icmp_ln51_27_fu_442_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_20_fu_462_p3 <= 
        trunc_ln44_42_fu_320_p4 when (icmp_ln51_28_fu_456_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_fu_392_p3 <= 
        trunc_ln44_37_fu_220_p4 when (icmp_ln51_23_fu_386_p2(0) = '1') else 
        ap_const_lv15_0;
    trunc_ln44_23_fu_210_p4 <= layer4_out_dout(79 downto 64);
    trunc_ln44_24_fu_230_p4 <= layer4_out_dout(95 downto 80);
    trunc_ln44_25_fu_250_p4 <= layer4_out_dout(111 downto 96);
    trunc_ln44_26_fu_270_p4 <= layer4_out_dout(127 downto 112);
    trunc_ln44_27_fu_290_p4 <= layer4_out_dout(143 downto 128);
    trunc_ln44_28_fu_310_p4 <= layer4_out_dout(159 downto 144);
    trunc_ln44_35_fu_180_p4 <= layer4_out_dout(46 downto 32);
    trunc_ln44_36_fu_200_p4 <= layer4_out_dout(62 downto 48);
    trunc_ln44_37_fu_220_p4 <= layer4_out_dout(78 downto 64);
    trunc_ln44_38_fu_240_p4 <= layer4_out_dout(94 downto 80);
    trunc_ln44_39_fu_260_p4 <= layer4_out_dout(110 downto 96);
    trunc_ln44_40_fu_280_p4 <= layer4_out_dout(126 downto 112);
    trunc_ln44_41_fu_300_p4 <= layer4_out_dout(142 downto 128);
    trunc_ln44_42_fu_320_p4 <= layer4_out_dout(158 downto 144);
    trunc_ln44_45_fu_146_p1 <= layer4_out_dout(15 - 1 downto 0);
    trunc_ln44_s_fu_160_p4 <= layer4_out_dout(30 downto 16);
    zext_ln45_4_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_10_reg_541),16));
    zext_ln45_5_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_12_reg_546),16));
    zext_ln45_6_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_14_reg_551),16));
    zext_ln45_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_8_reg_536),16));
    zext_ln51_15_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_16_reg_561),16));
    zext_ln51_16_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_17_reg_566),16));
    zext_ln51_17_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_18_reg_571),16));
    zext_ln51_18_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_19_reg_576),16));
    zext_ln51_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_reg_556),16));
end behav;
