-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_20u_array_ap_fixed_16_6_5_3_0_20u_relu_config3_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer2_out_dout : IN STD_LOGIC_VECTOR (319 downto 0);
    layer2_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer2_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer2_out_empty_n : IN STD_LOGIC;
    layer2_out_read : OUT STD_LOGIC;
    layer3_out_din : OUT STD_LOGIC_VECTOR (319 downto 0);
    layer3_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer3_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer3_out_full_n : IN STD_LOGIC;
    layer3_out_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_20u_array_ap_fixed_16_6_5_3_0_20u_relu_config3_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_F7 : STD_LOGIC_VECTOR (7 downto 0) := "11110111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101110";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111110";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_CE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001110";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_DE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011110";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_EE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101110";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111110";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_10E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001110";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_11E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011110";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_12E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101110";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_13E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln41_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer2_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer3_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal out_data_1_fu_596_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_1_reg_986 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_3_fu_610_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_3_reg_991 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_5_fu_624_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_5_reg_996 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_7_fu_638_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_data_7_reg_1001 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_fu_652_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_reg_1006 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_1_fu_666_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_1_reg_1011 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_2_fu_680_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_2_reg_1016 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_3_fu_694_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_3_reg_1021 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_4_fu_708_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_4_reg_1026 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_5_fu_722_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_5_reg_1031 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_6_fu_736_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_6_reg_1036 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_7_fu_750_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_7_reg_1041 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_8_fu_764_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_8_reg_1046 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_9_fu_778_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_9_reg_1051 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_10_fu_792_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_10_reg_1056 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_11_fu_806_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_11_reg_1061 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_12_fu_820_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_12_reg_1066 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_13_fu_834_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_13_reg_1071 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_14_fu_848_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_14_reg_1076 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_15_fu_862_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln51_15_reg_1081 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_fu_160 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_2_fu_191_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal in_data_fu_202_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_36_fu_206_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_4_fu_210_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_1_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_1_fu_220_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_5_fu_230_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_2_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_2_fu_240_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_data_6_fu_250_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_3_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_3_fu_260_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_4_fu_270_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_4_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_s_fu_280_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_5_fu_290_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_5_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_20_fu_300_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_6_fu_310_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_6_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_21_fu_320_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_7_fu_330_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_7_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_22_fu_340_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_8_fu_350_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_8_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_23_fu_360_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_9_fu_370_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_9_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_24_fu_380_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_10_fu_390_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_10_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_25_fu_400_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_11_fu_410_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_11_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_26_fu_420_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_12_fu_430_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_12_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_27_fu_440_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_13_fu_450_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_13_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_28_fu_460_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_14_fu_470_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_14_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_29_fu_480_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_15_fu_490_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_15_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_30_fu_500_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_16_fu_510_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_16_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_31_fu_520_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_17_fu_530_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_17_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_32_fu_540_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_18_fu_550_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_18_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_33_fu_560_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln44_19_fu_570_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln51_19_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_34_fu_580_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln51_14_fu_924_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_13_fu_921_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_12_fu_918_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_11_fu_915_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_10_fu_912_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_9_fu_909_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_8_fu_906_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_7_fu_903_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_6_fu_900_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_5_fu_897_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_4_fu_894_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_3_fu_891_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_2_fu_888_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_1_fu_885_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_fu_882_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_3_fu_879_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_2_fu_876_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_1_fu_873_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_fu_870_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln57_s_fu_927_p21 : STD_LOGIC_VECTOR (318 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_153 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component myproject_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_153)) then
                if ((icmp_ln41_fu_185_p2 = ap_const_lv1_0)) then 
                    i_fu_160 <= i_2_fu_191_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_160 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                out_data_1_reg_986 <= out_data_1_fu_596_p3;
                out_data_3_reg_991 <= out_data_3_fu_610_p3;
                out_data_5_reg_996 <= out_data_5_fu_624_p3;
                out_data_7_reg_1001 <= out_data_7_fu_638_p3;
                select_ln51_10_reg_1056 <= select_ln51_10_fu_792_p3;
                select_ln51_11_reg_1061 <= select_ln51_11_fu_806_p3;
                select_ln51_12_reg_1066 <= select_ln51_12_fu_820_p3;
                select_ln51_13_reg_1071 <= select_ln51_13_fu_834_p3;
                select_ln51_14_reg_1076 <= select_ln51_14_fu_848_p3;
                select_ln51_15_reg_1081 <= select_ln51_15_fu_862_p3;
                select_ln51_1_reg_1011 <= select_ln51_1_fu_666_p3;
                select_ln51_2_reg_1016 <= select_ln51_2_fu_680_p3;
                select_ln51_3_reg_1021 <= select_ln51_3_fu_694_p3;
                select_ln51_4_reg_1026 <= select_ln51_4_fu_708_p3;
                select_ln51_5_reg_1031 <= select_ln51_5_fu_722_p3;
                select_ln51_6_reg_1036 <= select_ln51_6_fu_736_p3;
                select_ln51_7_reg_1041 <= select_ln51_7_fu_750_p3;
                select_ln51_8_reg_1046 <= select_ln51_8_fu_764_p3;
                select_ln51_9_reg_1051 <= select_ln51_9_fu_778_p3;
                select_ln51_reg_1006 <= select_ln51_fu_652_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(layer2_out_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (layer2_out_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(layer3_out_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (layer3_out_full_n = ap_const_logic_0);
    end process;


    ap_condition_153_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_153 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln41_fu_185_p2, ap_start_int)
    begin
        if (((icmp_ln41_fu_185_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_160, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_160;
        end if; 
    end process;

    i_2_fu_191_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv8_1));
    icmp_ln41_fu_185_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv8_F7) else "0";
    icmp_ln51_10_fu_730_p2 <= "1" when (signed(trunc_ln44_10_fu_390_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_11_fu_744_p2 <= "1" when (signed(trunc_ln44_11_fu_410_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_12_fu_758_p2 <= "1" when (signed(trunc_ln44_12_fu_430_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_13_fu_772_p2 <= "1" when (signed(trunc_ln44_13_fu_450_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_14_fu_786_p2 <= "1" when (signed(trunc_ln44_14_fu_470_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_15_fu_800_p2 <= "1" when (signed(trunc_ln44_15_fu_490_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_16_fu_814_p2 <= "1" when (signed(trunc_ln44_16_fu_510_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_17_fu_828_p2 <= "1" when (signed(trunc_ln44_17_fu_530_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_18_fu_842_p2 <= "1" when (signed(trunc_ln44_18_fu_550_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_19_fu_856_p2 <= "1" when (signed(trunc_ln44_19_fu_570_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_1_fu_604_p2 <= "1" when (signed(in_data_4_fu_210_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_2_fu_618_p2 <= "1" when (signed(in_data_5_fu_230_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_3_fu_632_p2 <= "1" when (signed(in_data_6_fu_250_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_4_fu_646_p2 <= "1" when (signed(trunc_ln44_4_fu_270_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_5_fu_660_p2 <= "1" when (signed(trunc_ln44_5_fu_290_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_6_fu_674_p2 <= "1" when (signed(trunc_ln44_6_fu_310_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_7_fu_688_p2 <= "1" when (signed(trunc_ln44_7_fu_330_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_8_fu_702_p2 <= "1" when (signed(trunc_ln44_8_fu_350_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_9_fu_716_p2 <= "1" when (signed(trunc_ln44_9_fu_370_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln51_fu_590_p2 <= "1" when (signed(in_data_fu_202_p1) > signed(ap_const_lv16_0)) else "0";
    in_data_4_fu_210_p4 <= layer2_out_dout(31 downto 16);
    in_data_5_fu_230_p4 <= layer2_out_dout(47 downto 32);
    in_data_6_fu_250_p4 <= layer2_out_dout(63 downto 48);
    in_data_fu_202_p1 <= layer2_out_dout(16 - 1 downto 0);

    layer2_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer2_out_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_out_blk_n <= layer2_out_empty_n;
        else 
            layer2_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer2_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_out_read <= ap_const_logic_1;
        else 
            layer2_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer3_out_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, layer3_out_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer3_out_blk_n <= layer3_out_full_n;
        else 
            layer3_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer3_out_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln57_s_fu_927_p21),320));

    layer3_out_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer3_out_write <= ap_const_logic_1;
        else 
            layer3_out_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln57_s_fu_927_p21 <= (((((((((((((((((((select_ln51_15_reg_1081 & zext_ln51_14_fu_924_p1) & zext_ln51_13_fu_921_p1) & zext_ln51_12_fu_918_p1) & zext_ln51_11_fu_915_p1) & zext_ln51_10_fu_912_p1) & zext_ln51_9_fu_909_p1) & zext_ln51_8_fu_906_p1) & zext_ln51_7_fu_903_p1) & zext_ln51_6_fu_900_p1) & zext_ln51_5_fu_897_p1) & zext_ln51_4_fu_894_p1) & zext_ln51_3_fu_891_p1) & zext_ln51_2_fu_888_p1) & zext_ln51_1_fu_885_p1) & zext_ln51_fu_882_p1) & zext_ln45_3_fu_879_p1) & zext_ln45_2_fu_876_p1) & zext_ln45_1_fu_873_p1) & zext_ln45_fu_870_p1);
    out_data_1_fu_596_p3 <= 
        trunc_ln44_36_fu_206_p1 when (icmp_ln51_fu_590_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_3_fu_610_p3 <= 
        trunc_ln44_1_fu_220_p4 when (icmp_ln51_1_fu_604_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_5_fu_624_p3 <= 
        trunc_ln44_2_fu_240_p4 when (icmp_ln51_2_fu_618_p2(0) = '1') else 
        ap_const_lv15_0;
    out_data_7_fu_638_p3 <= 
        trunc_ln44_3_fu_260_p4 when (icmp_ln51_3_fu_632_p2(0) = '1') else 
        ap_const_lv15_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln51_10_fu_792_p3 <= 
        trunc_ln44_29_fu_480_p4 when (icmp_ln51_14_fu_786_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_11_fu_806_p3 <= 
        trunc_ln44_30_fu_500_p4 when (icmp_ln51_15_fu_800_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_12_fu_820_p3 <= 
        trunc_ln44_31_fu_520_p4 when (icmp_ln51_16_fu_814_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_13_fu_834_p3 <= 
        trunc_ln44_32_fu_540_p4 when (icmp_ln51_17_fu_828_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_14_fu_848_p3 <= 
        trunc_ln44_33_fu_560_p4 when (icmp_ln51_18_fu_842_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_15_fu_862_p3 <= 
        trunc_ln44_34_fu_580_p4 when (icmp_ln51_19_fu_856_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_1_fu_666_p3 <= 
        trunc_ln44_20_fu_300_p4 when (icmp_ln51_5_fu_660_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_2_fu_680_p3 <= 
        trunc_ln44_21_fu_320_p4 when (icmp_ln51_6_fu_674_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_3_fu_694_p3 <= 
        trunc_ln44_22_fu_340_p4 when (icmp_ln51_7_fu_688_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_4_fu_708_p3 <= 
        trunc_ln44_23_fu_360_p4 when (icmp_ln51_8_fu_702_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_5_fu_722_p3 <= 
        trunc_ln44_24_fu_380_p4 when (icmp_ln51_9_fu_716_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_6_fu_736_p3 <= 
        trunc_ln44_25_fu_400_p4 when (icmp_ln51_10_fu_730_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_7_fu_750_p3 <= 
        trunc_ln44_26_fu_420_p4 when (icmp_ln51_11_fu_744_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_8_fu_764_p3 <= 
        trunc_ln44_27_fu_440_p4 when (icmp_ln51_12_fu_758_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_9_fu_778_p3 <= 
        trunc_ln44_28_fu_460_p4 when (icmp_ln51_13_fu_772_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln51_fu_652_p3 <= 
        trunc_ln44_s_fu_280_p4 when (icmp_ln51_4_fu_646_p2(0) = '1') else 
        ap_const_lv15_0;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln44_10_fu_390_p4 <= layer2_out_dout(175 downto 160);
    trunc_ln44_11_fu_410_p4 <= layer2_out_dout(191 downto 176);
    trunc_ln44_12_fu_430_p4 <= layer2_out_dout(207 downto 192);
    trunc_ln44_13_fu_450_p4 <= layer2_out_dout(223 downto 208);
    trunc_ln44_14_fu_470_p4 <= layer2_out_dout(239 downto 224);
    trunc_ln44_15_fu_490_p4 <= layer2_out_dout(255 downto 240);
    trunc_ln44_16_fu_510_p4 <= layer2_out_dout(271 downto 256);
    trunc_ln44_17_fu_530_p4 <= layer2_out_dout(287 downto 272);
    trunc_ln44_18_fu_550_p4 <= layer2_out_dout(303 downto 288);
    trunc_ln44_19_fu_570_p4 <= layer2_out_dout(319 downto 304);
    trunc_ln44_1_fu_220_p4 <= layer2_out_dout(30 downto 16);
    trunc_ln44_20_fu_300_p4 <= layer2_out_dout(94 downto 80);
    trunc_ln44_21_fu_320_p4 <= layer2_out_dout(110 downto 96);
    trunc_ln44_22_fu_340_p4 <= layer2_out_dout(126 downto 112);
    trunc_ln44_23_fu_360_p4 <= layer2_out_dout(142 downto 128);
    trunc_ln44_24_fu_380_p4 <= layer2_out_dout(158 downto 144);
    trunc_ln44_25_fu_400_p4 <= layer2_out_dout(174 downto 160);
    trunc_ln44_26_fu_420_p4 <= layer2_out_dout(190 downto 176);
    trunc_ln44_27_fu_440_p4 <= layer2_out_dout(206 downto 192);
    trunc_ln44_28_fu_460_p4 <= layer2_out_dout(222 downto 208);
    trunc_ln44_29_fu_480_p4 <= layer2_out_dout(238 downto 224);
    trunc_ln44_2_fu_240_p4 <= layer2_out_dout(46 downto 32);
    trunc_ln44_30_fu_500_p4 <= layer2_out_dout(254 downto 240);
    trunc_ln44_31_fu_520_p4 <= layer2_out_dout(270 downto 256);
    trunc_ln44_32_fu_540_p4 <= layer2_out_dout(286 downto 272);
    trunc_ln44_33_fu_560_p4 <= layer2_out_dout(302 downto 288);
    trunc_ln44_34_fu_580_p4 <= layer2_out_dout(318 downto 304);
    trunc_ln44_36_fu_206_p1 <= layer2_out_dout(15 - 1 downto 0);
    trunc_ln44_3_fu_260_p4 <= layer2_out_dout(62 downto 48);
    trunc_ln44_4_fu_270_p4 <= layer2_out_dout(79 downto 64);
    trunc_ln44_5_fu_290_p4 <= layer2_out_dout(95 downto 80);
    trunc_ln44_6_fu_310_p4 <= layer2_out_dout(111 downto 96);
    trunc_ln44_7_fu_330_p4 <= layer2_out_dout(127 downto 112);
    trunc_ln44_8_fu_350_p4 <= layer2_out_dout(143 downto 128);
    trunc_ln44_9_fu_370_p4 <= layer2_out_dout(159 downto 144);
    trunc_ln44_s_fu_280_p4 <= layer2_out_dout(78 downto 64);
    zext_ln45_1_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_3_reg_991),16));
    zext_ln45_2_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_5_reg_996),16));
    zext_ln45_3_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_7_reg_1001),16));
    zext_ln45_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_1_reg_986),16));
    zext_ln51_10_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_10_reg_1056),16));
    zext_ln51_11_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_11_reg_1061),16));
    zext_ln51_12_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_12_reg_1066),16));
    zext_ln51_13_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_13_reg_1071),16));
    zext_ln51_14_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_14_reg_1076),16));
    zext_ln51_1_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_1_reg_1011),16));
    zext_ln51_2_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_2_reg_1016),16));
    zext_ln51_3_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_3_reg_1021),16));
    zext_ln51_4_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_4_reg_1026),16));
    zext_ln51_5_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_5_reg_1031),16));
    zext_ln51_6_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_6_reg_1036),16));
    zext_ln51_7_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_7_reg_1041),16));
    zext_ln51_8_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_8_reg_1046),16));
    zext_ln51_9_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_9_reg_1051),16));
    zext_ln51_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_reg_1006),16));
end behav;
