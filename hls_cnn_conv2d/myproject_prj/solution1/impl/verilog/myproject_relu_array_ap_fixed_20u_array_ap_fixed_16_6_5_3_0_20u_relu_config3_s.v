// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_20u_array_ap_fixed_16_6_5_3_0_20u_relu_config3_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer2_out_dout,
        layer2_out_num_data_valid,
        layer2_out_fifo_cap,
        layer2_out_empty_n,
        layer2_out_read,
        layer3_out_din,
        layer3_out_num_data_valid,
        layer3_out_fifo_cap,
        layer3_out_full_n,
        layer3_out_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [319:0] layer2_out_dout;
input  [8:0] layer2_out_num_data_valid;
input  [8:0] layer2_out_fifo_cap;
input   layer2_out_empty_n;
output   layer2_out_read;
output  [319:0] layer3_out_din;
input  [8:0] layer3_out_num_data_valid;
input  [8:0] layer3_out_fifo_cap;
input   layer3_out_full_n;
output   layer3_out_write;
output   start_out;
output   start_write;

reg ap_idle;
reg layer2_out_read;
reg layer3_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln41_fu_185_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer2_out_blk_n;
wire    ap_block_pp0_stage0;
reg    layer3_out_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [14:0] out_data_1_fu_596_p3;
reg   [14:0] out_data_1_reg_986;
wire   [14:0] out_data_3_fu_610_p3;
reg   [14:0] out_data_3_reg_991;
wire   [14:0] out_data_5_fu_624_p3;
reg   [14:0] out_data_5_reg_996;
wire   [14:0] out_data_7_fu_638_p3;
reg   [14:0] out_data_7_reg_1001;
wire   [14:0] select_ln51_fu_652_p3;
reg   [14:0] select_ln51_reg_1006;
wire   [14:0] select_ln51_1_fu_666_p3;
reg   [14:0] select_ln51_1_reg_1011;
wire   [14:0] select_ln51_2_fu_680_p3;
reg   [14:0] select_ln51_2_reg_1016;
wire   [14:0] select_ln51_3_fu_694_p3;
reg   [14:0] select_ln51_3_reg_1021;
wire   [14:0] select_ln51_4_fu_708_p3;
reg   [14:0] select_ln51_4_reg_1026;
wire   [14:0] select_ln51_5_fu_722_p3;
reg   [14:0] select_ln51_5_reg_1031;
wire   [14:0] select_ln51_6_fu_736_p3;
reg   [14:0] select_ln51_6_reg_1036;
wire   [14:0] select_ln51_7_fu_750_p3;
reg   [14:0] select_ln51_7_reg_1041;
wire   [14:0] select_ln51_8_fu_764_p3;
reg   [14:0] select_ln51_8_reg_1046;
wire   [14:0] select_ln51_9_fu_778_p3;
reg   [14:0] select_ln51_9_reg_1051;
wire   [14:0] select_ln51_10_fu_792_p3;
reg   [14:0] select_ln51_10_reg_1056;
wire   [14:0] select_ln51_11_fu_806_p3;
reg   [14:0] select_ln51_11_reg_1061;
wire   [14:0] select_ln51_12_fu_820_p3;
reg   [14:0] select_ln51_12_reg_1066;
wire   [14:0] select_ln51_13_fu_834_p3;
reg   [14:0] select_ln51_13_reg_1071;
wire   [14:0] select_ln51_14_fu_848_p3;
reg   [14:0] select_ln51_14_reg_1076;
wire   [14:0] select_ln51_15_fu_862_p3;
reg   [14:0] select_ln51_15_reg_1081;
reg   [7:0] i_fu_160;
wire   [7:0] i_2_fu_191_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] in_data_fu_202_p1;
wire   [0:0] icmp_ln51_fu_590_p2;
wire   [14:0] trunc_ln44_36_fu_206_p1;
wire   [15:0] in_data_4_fu_210_p4;
wire   [0:0] icmp_ln51_1_fu_604_p2;
wire   [14:0] trunc_ln44_1_fu_220_p4;
wire   [15:0] in_data_5_fu_230_p4;
wire   [0:0] icmp_ln51_2_fu_618_p2;
wire   [14:0] trunc_ln44_2_fu_240_p4;
wire   [15:0] in_data_6_fu_250_p4;
wire   [0:0] icmp_ln51_3_fu_632_p2;
wire   [14:0] trunc_ln44_3_fu_260_p4;
wire   [15:0] trunc_ln44_4_fu_270_p4;
wire   [0:0] icmp_ln51_4_fu_646_p2;
wire   [14:0] trunc_ln44_s_fu_280_p4;
wire   [15:0] trunc_ln44_5_fu_290_p4;
wire   [0:0] icmp_ln51_5_fu_660_p2;
wire   [14:0] trunc_ln44_20_fu_300_p4;
wire   [15:0] trunc_ln44_6_fu_310_p4;
wire   [0:0] icmp_ln51_6_fu_674_p2;
wire   [14:0] trunc_ln44_21_fu_320_p4;
wire   [15:0] trunc_ln44_7_fu_330_p4;
wire   [0:0] icmp_ln51_7_fu_688_p2;
wire   [14:0] trunc_ln44_22_fu_340_p4;
wire   [15:0] trunc_ln44_8_fu_350_p4;
wire   [0:0] icmp_ln51_8_fu_702_p2;
wire   [14:0] trunc_ln44_23_fu_360_p4;
wire   [15:0] trunc_ln44_9_fu_370_p4;
wire   [0:0] icmp_ln51_9_fu_716_p2;
wire   [14:0] trunc_ln44_24_fu_380_p4;
wire   [15:0] trunc_ln44_10_fu_390_p4;
wire   [0:0] icmp_ln51_10_fu_730_p2;
wire   [14:0] trunc_ln44_25_fu_400_p4;
wire   [15:0] trunc_ln44_11_fu_410_p4;
wire   [0:0] icmp_ln51_11_fu_744_p2;
wire   [14:0] trunc_ln44_26_fu_420_p4;
wire   [15:0] trunc_ln44_12_fu_430_p4;
wire   [0:0] icmp_ln51_12_fu_758_p2;
wire   [14:0] trunc_ln44_27_fu_440_p4;
wire   [15:0] trunc_ln44_13_fu_450_p4;
wire   [0:0] icmp_ln51_13_fu_772_p2;
wire   [14:0] trunc_ln44_28_fu_460_p4;
wire   [15:0] trunc_ln44_14_fu_470_p4;
wire   [0:0] icmp_ln51_14_fu_786_p2;
wire   [14:0] trunc_ln44_29_fu_480_p4;
wire   [15:0] trunc_ln44_15_fu_490_p4;
wire   [0:0] icmp_ln51_15_fu_800_p2;
wire   [14:0] trunc_ln44_30_fu_500_p4;
wire   [15:0] trunc_ln44_16_fu_510_p4;
wire   [0:0] icmp_ln51_16_fu_814_p2;
wire   [14:0] trunc_ln44_31_fu_520_p4;
wire   [15:0] trunc_ln44_17_fu_530_p4;
wire   [0:0] icmp_ln51_17_fu_828_p2;
wire   [14:0] trunc_ln44_32_fu_540_p4;
wire   [15:0] trunc_ln44_18_fu_550_p4;
wire   [0:0] icmp_ln51_18_fu_842_p2;
wire   [14:0] trunc_ln44_33_fu_560_p4;
wire   [15:0] trunc_ln44_19_fu_570_p4;
wire   [0:0] icmp_ln51_19_fu_856_p2;
wire   [14:0] trunc_ln44_34_fu_580_p4;
wire   [15:0] zext_ln51_14_fu_924_p1;
wire   [15:0] zext_ln51_13_fu_921_p1;
wire   [15:0] zext_ln51_12_fu_918_p1;
wire   [15:0] zext_ln51_11_fu_915_p1;
wire   [15:0] zext_ln51_10_fu_912_p1;
wire   [15:0] zext_ln51_9_fu_909_p1;
wire   [15:0] zext_ln51_8_fu_906_p1;
wire   [15:0] zext_ln51_7_fu_903_p1;
wire   [15:0] zext_ln51_6_fu_900_p1;
wire   [15:0] zext_ln51_5_fu_897_p1;
wire   [15:0] zext_ln51_4_fu_894_p1;
wire   [15:0] zext_ln51_3_fu_891_p1;
wire   [15:0] zext_ln51_2_fu_888_p1;
wire   [15:0] zext_ln51_1_fu_885_p1;
wire   [15:0] zext_ln51_fu_882_p1;
wire   [15:0] zext_ln45_3_fu_879_p1;
wire   [15:0] zext_ln45_2_fu_876_p1;
wire   [15:0] zext_ln45_1_fu_873_p1;
wire   [15:0] zext_ln45_fu_870_p1;
wire   [318:0] or_ln57_s_fu_927_p21;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_153;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 i_fu_160 = 8'd0;
end

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_153)) begin
        if ((icmp_ln41_fu_185_p2 == 1'd0)) begin
            i_fu_160 <= i_2_fu_191_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_160 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        out_data_1_reg_986 <= out_data_1_fu_596_p3;
        out_data_3_reg_991 <= out_data_3_fu_610_p3;
        out_data_5_reg_996 <= out_data_5_fu_624_p3;
        out_data_7_reg_1001 <= out_data_7_fu_638_p3;
        select_ln51_10_reg_1056 <= select_ln51_10_fu_792_p3;
        select_ln51_11_reg_1061 <= select_ln51_11_fu_806_p3;
        select_ln51_12_reg_1066 <= select_ln51_12_fu_820_p3;
        select_ln51_13_reg_1071 <= select_ln51_13_fu_834_p3;
        select_ln51_14_reg_1076 <= select_ln51_14_fu_848_p3;
        select_ln51_15_reg_1081 <= select_ln51_15_fu_862_p3;
        select_ln51_1_reg_1011 <= select_ln51_1_fu_666_p3;
        select_ln51_2_reg_1016 <= select_ln51_2_fu_680_p3;
        select_ln51_3_reg_1021 <= select_ln51_3_fu_694_p3;
        select_ln51_4_reg_1026 <= select_ln51_4_fu_708_p3;
        select_ln51_5_reg_1031 <= select_ln51_5_fu_722_p3;
        select_ln51_6_reg_1036 <= select_ln51_6_fu_736_p3;
        select_ln51_7_reg_1041 <= select_ln51_7_fu_750_p3;
        select_ln51_8_reg_1046 <= select_ln51_8_fu_764_p3;
        select_ln51_9_reg_1051 <= select_ln51_9_fu_778_p3;
        select_ln51_reg_1006 <= select_ln51_fu_652_p3;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_185_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_160;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_out_blk_n = layer2_out_empty_n;
    end else begin
        layer2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_out_read = 1'b1;
    end else begin
        layer2_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer3_out_blk_n = layer3_out_full_n;
    end else begin
        layer3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer3_out_write = 1'b1;
    end else begin
        layer3_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (layer2_out_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (layer3_out_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_153 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign i_2_fu_191_p2 = (ap_sig_allocacmp_i_1 + 8'd1);

assign icmp_ln41_fu_185_p2 = ((ap_sig_allocacmp_i_1 == 8'd247) ? 1'b1 : 1'b0);

assign icmp_ln51_10_fu_730_p2 = (($signed(trunc_ln44_10_fu_390_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_11_fu_744_p2 = (($signed(trunc_ln44_11_fu_410_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_12_fu_758_p2 = (($signed(trunc_ln44_12_fu_430_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_13_fu_772_p2 = (($signed(trunc_ln44_13_fu_450_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_14_fu_786_p2 = (($signed(trunc_ln44_14_fu_470_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_15_fu_800_p2 = (($signed(trunc_ln44_15_fu_490_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_16_fu_814_p2 = (($signed(trunc_ln44_16_fu_510_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_17_fu_828_p2 = (($signed(trunc_ln44_17_fu_530_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_18_fu_842_p2 = (($signed(trunc_ln44_18_fu_550_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_19_fu_856_p2 = (($signed(trunc_ln44_19_fu_570_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_1_fu_604_p2 = (($signed(in_data_4_fu_210_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_2_fu_618_p2 = (($signed(in_data_5_fu_230_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_3_fu_632_p2 = (($signed(in_data_6_fu_250_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_4_fu_646_p2 = (($signed(trunc_ln44_4_fu_270_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_5_fu_660_p2 = (($signed(trunc_ln44_5_fu_290_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_6_fu_674_p2 = (($signed(trunc_ln44_6_fu_310_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_7_fu_688_p2 = (($signed(trunc_ln44_7_fu_330_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_8_fu_702_p2 = (($signed(trunc_ln44_8_fu_350_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_9_fu_716_p2 = (($signed(trunc_ln44_9_fu_370_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_590_p2 = (($signed(in_data_fu_202_p1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign in_data_4_fu_210_p4 = {{layer2_out_dout[31:16]}};

assign in_data_5_fu_230_p4 = {{layer2_out_dout[47:32]}};

assign in_data_6_fu_250_p4 = {{layer2_out_dout[63:48]}};

assign in_data_fu_202_p1 = layer2_out_dout[15:0];

assign layer3_out_din = or_ln57_s_fu_927_p21;

assign or_ln57_s_fu_927_p21 = {{{{{{{{{{{{{{{{{{{{select_ln51_15_reg_1081}, {zext_ln51_14_fu_924_p1}}, {zext_ln51_13_fu_921_p1}}, {zext_ln51_12_fu_918_p1}}, {zext_ln51_11_fu_915_p1}}, {zext_ln51_10_fu_912_p1}}, {zext_ln51_9_fu_909_p1}}, {zext_ln51_8_fu_906_p1}}, {zext_ln51_7_fu_903_p1}}, {zext_ln51_6_fu_900_p1}}, {zext_ln51_5_fu_897_p1}}, {zext_ln51_4_fu_894_p1}}, {zext_ln51_3_fu_891_p1}}, {zext_ln51_2_fu_888_p1}}, {zext_ln51_1_fu_885_p1}}, {zext_ln51_fu_882_p1}}, {zext_ln45_3_fu_879_p1}}, {zext_ln45_2_fu_876_p1}}, {zext_ln45_1_fu_873_p1}}, {zext_ln45_fu_870_p1}};

assign out_data_1_fu_596_p3 = ((icmp_ln51_fu_590_p2[0:0] == 1'b1) ? trunc_ln44_36_fu_206_p1 : 15'd0);

assign out_data_3_fu_610_p3 = ((icmp_ln51_1_fu_604_p2[0:0] == 1'b1) ? trunc_ln44_1_fu_220_p4 : 15'd0);

assign out_data_5_fu_624_p3 = ((icmp_ln51_2_fu_618_p2[0:0] == 1'b1) ? trunc_ln44_2_fu_240_p4 : 15'd0);

assign out_data_7_fu_638_p3 = ((icmp_ln51_3_fu_632_p2[0:0] == 1'b1) ? trunc_ln44_3_fu_260_p4 : 15'd0);

assign select_ln51_10_fu_792_p3 = ((icmp_ln51_14_fu_786_p2[0:0] == 1'b1) ? trunc_ln44_29_fu_480_p4 : 15'd0);

assign select_ln51_11_fu_806_p3 = ((icmp_ln51_15_fu_800_p2[0:0] == 1'b1) ? trunc_ln44_30_fu_500_p4 : 15'd0);

assign select_ln51_12_fu_820_p3 = ((icmp_ln51_16_fu_814_p2[0:0] == 1'b1) ? trunc_ln44_31_fu_520_p4 : 15'd0);

assign select_ln51_13_fu_834_p3 = ((icmp_ln51_17_fu_828_p2[0:0] == 1'b1) ? trunc_ln44_32_fu_540_p4 : 15'd0);

assign select_ln51_14_fu_848_p3 = ((icmp_ln51_18_fu_842_p2[0:0] == 1'b1) ? trunc_ln44_33_fu_560_p4 : 15'd0);

assign select_ln51_15_fu_862_p3 = ((icmp_ln51_19_fu_856_p2[0:0] == 1'b1) ? trunc_ln44_34_fu_580_p4 : 15'd0);

assign select_ln51_1_fu_666_p3 = ((icmp_ln51_5_fu_660_p2[0:0] == 1'b1) ? trunc_ln44_20_fu_300_p4 : 15'd0);

assign select_ln51_2_fu_680_p3 = ((icmp_ln51_6_fu_674_p2[0:0] == 1'b1) ? trunc_ln44_21_fu_320_p4 : 15'd0);

assign select_ln51_3_fu_694_p3 = ((icmp_ln51_7_fu_688_p2[0:0] == 1'b1) ? trunc_ln44_22_fu_340_p4 : 15'd0);

assign select_ln51_4_fu_708_p3 = ((icmp_ln51_8_fu_702_p2[0:0] == 1'b1) ? trunc_ln44_23_fu_360_p4 : 15'd0);

assign select_ln51_5_fu_722_p3 = ((icmp_ln51_9_fu_716_p2[0:0] == 1'b1) ? trunc_ln44_24_fu_380_p4 : 15'd0);

assign select_ln51_6_fu_736_p3 = ((icmp_ln51_10_fu_730_p2[0:0] == 1'b1) ? trunc_ln44_25_fu_400_p4 : 15'd0);

assign select_ln51_7_fu_750_p3 = ((icmp_ln51_11_fu_744_p2[0:0] == 1'b1) ? trunc_ln44_26_fu_420_p4 : 15'd0);

assign select_ln51_8_fu_764_p3 = ((icmp_ln51_12_fu_758_p2[0:0] == 1'b1) ? trunc_ln44_27_fu_440_p4 : 15'd0);

assign select_ln51_9_fu_778_p3 = ((icmp_ln51_13_fu_772_p2[0:0] == 1'b1) ? trunc_ln44_28_fu_460_p4 : 15'd0);

assign select_ln51_fu_652_p3 = ((icmp_ln51_4_fu_646_p2[0:0] == 1'b1) ? trunc_ln44_s_fu_280_p4 : 15'd0);

assign start_out = real_start;

assign trunc_ln44_10_fu_390_p4 = {{layer2_out_dout[175:160]}};

assign trunc_ln44_11_fu_410_p4 = {{layer2_out_dout[191:176]}};

assign trunc_ln44_12_fu_430_p4 = {{layer2_out_dout[207:192]}};

assign trunc_ln44_13_fu_450_p4 = {{layer2_out_dout[223:208]}};

assign trunc_ln44_14_fu_470_p4 = {{layer2_out_dout[239:224]}};

assign trunc_ln44_15_fu_490_p4 = {{layer2_out_dout[255:240]}};

assign trunc_ln44_16_fu_510_p4 = {{layer2_out_dout[271:256]}};

assign trunc_ln44_17_fu_530_p4 = {{layer2_out_dout[287:272]}};

assign trunc_ln44_18_fu_550_p4 = {{layer2_out_dout[303:288]}};

assign trunc_ln44_19_fu_570_p4 = {{layer2_out_dout[319:304]}};

assign trunc_ln44_1_fu_220_p4 = {{layer2_out_dout[30:16]}};

assign trunc_ln44_20_fu_300_p4 = {{layer2_out_dout[94:80]}};

assign trunc_ln44_21_fu_320_p4 = {{layer2_out_dout[110:96]}};

assign trunc_ln44_22_fu_340_p4 = {{layer2_out_dout[126:112]}};

assign trunc_ln44_23_fu_360_p4 = {{layer2_out_dout[142:128]}};

assign trunc_ln44_24_fu_380_p4 = {{layer2_out_dout[158:144]}};

assign trunc_ln44_25_fu_400_p4 = {{layer2_out_dout[174:160]}};

assign trunc_ln44_26_fu_420_p4 = {{layer2_out_dout[190:176]}};

assign trunc_ln44_27_fu_440_p4 = {{layer2_out_dout[206:192]}};

assign trunc_ln44_28_fu_460_p4 = {{layer2_out_dout[222:208]}};

assign trunc_ln44_29_fu_480_p4 = {{layer2_out_dout[238:224]}};

assign trunc_ln44_2_fu_240_p4 = {{layer2_out_dout[46:32]}};

assign trunc_ln44_30_fu_500_p4 = {{layer2_out_dout[254:240]}};

assign trunc_ln44_31_fu_520_p4 = {{layer2_out_dout[270:256]}};

assign trunc_ln44_32_fu_540_p4 = {{layer2_out_dout[286:272]}};

assign trunc_ln44_33_fu_560_p4 = {{layer2_out_dout[302:288]}};

assign trunc_ln44_34_fu_580_p4 = {{layer2_out_dout[318:304]}};

assign trunc_ln44_36_fu_206_p1 = layer2_out_dout[14:0];

assign trunc_ln44_3_fu_260_p4 = {{layer2_out_dout[62:48]}};

assign trunc_ln44_4_fu_270_p4 = {{layer2_out_dout[79:64]}};

assign trunc_ln44_5_fu_290_p4 = {{layer2_out_dout[95:80]}};

assign trunc_ln44_6_fu_310_p4 = {{layer2_out_dout[111:96]}};

assign trunc_ln44_7_fu_330_p4 = {{layer2_out_dout[127:112]}};

assign trunc_ln44_8_fu_350_p4 = {{layer2_out_dout[143:128]}};

assign trunc_ln44_9_fu_370_p4 = {{layer2_out_dout[159:144]}};

assign trunc_ln44_s_fu_280_p4 = {{layer2_out_dout[78:64]}};

assign zext_ln45_1_fu_873_p1 = out_data_3_reg_991;

assign zext_ln45_2_fu_876_p1 = out_data_5_reg_996;

assign zext_ln45_3_fu_879_p1 = out_data_7_reg_1001;

assign zext_ln45_fu_870_p1 = out_data_1_reg_986;

assign zext_ln51_10_fu_912_p1 = select_ln51_10_reg_1056;

assign zext_ln51_11_fu_915_p1 = select_ln51_11_reg_1061;

assign zext_ln51_12_fu_918_p1 = select_ln51_12_reg_1066;

assign zext_ln51_13_fu_921_p1 = select_ln51_13_reg_1071;

assign zext_ln51_14_fu_924_p1 = select_ln51_14_reg_1076;

assign zext_ln51_1_fu_885_p1 = select_ln51_1_reg_1011;

assign zext_ln51_2_fu_888_p1 = select_ln51_2_reg_1016;

assign zext_ln51_3_fu_891_p1 = select_ln51_3_reg_1021;

assign zext_ln51_4_fu_894_p1 = select_ln51_4_reg_1026;

assign zext_ln51_5_fu_897_p1 = select_ln51_5_reg_1031;

assign zext_ln51_6_fu_900_p1 = select_ln51_6_reg_1036;

assign zext_ln51_7_fu_903_p1 = select_ln51_7_reg_1041;

assign zext_ln51_8_fu_906_p1 = select_ln51_8_reg_1046;

assign zext_ln51_9_fu_909_p1 = select_ln51_9_reg_1051;

assign zext_ln51_fu_882_p1 = select_ln51_reg_1006;

endmodule //myproject_relu_array_ap_fixed_20u_array_ap_fixed_16_6_5_3_0_20u_relu_config3_s
