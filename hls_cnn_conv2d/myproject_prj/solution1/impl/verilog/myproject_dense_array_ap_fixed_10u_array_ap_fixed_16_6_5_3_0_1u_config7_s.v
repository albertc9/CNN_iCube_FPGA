// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_dense_array_ap_fixed_10u_array_ap_fixed_16_6_5_3_0_1u_config7_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer5_out_dout,
        layer5_out_num_data_valid,
        layer5_out_fifo_cap,
        layer5_out_empty_n,
        layer5_out_read,
        layer7_out_din,
        layer7_out_num_data_valid,
        layer7_out_fifo_cap,
        layer7_out_full_n,
        layer7_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [159:0] layer5_out_dout;
input  [8:0] layer5_out_num_data_valid;
input  [8:0] layer5_out_fifo_cap;
input   layer5_out_empty_n;
output   layer5_out_read;
output  [15:0] layer7_out_din;
input  [1:0] layer7_out_num_data_valid;
input  [1:0] layer7_out_fifo_cap;
input   layer7_out_full_n;
output   layer7_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer5_out_read;
reg layer7_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer7_out_blk_n;
wire    ap_CS_fsm_state5;
wire   [1:0] in_index_fu_65_p2;
wire    ap_CS_fsm_state4;
wire    grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_start;
wire    grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_done;
wire    grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_idle;
wire    grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_ready;
wire    grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_layer5_out_read;
reg   [1:0] in_index1_reg_48;
wire   [0:0] icmp_ln42_fu_71_p2;
wire    ap_CS_fsm_state3;
reg    grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_start_reg;
reg    ap_block_state1_ignore_call3;
wire    ap_CS_fsm_state2;
reg   [4:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_start_reg = 1'b0;
end

myproject_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_start),
    .ap_done(grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_done),
    .ap_idle(grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_idle),
    .ap_ready(grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_ready),
    .layer5_out_dout(layer5_out_dout),
    .layer5_out_num_data_valid(9'd0),
    .layer5_out_fifo_cap(9'd0),
    .layer5_out_empty_n(layer5_out_empty_n),
    .layer5_out_read(grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_layer5_out_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((layer7_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call3) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_start_reg <= 1'b1;
        end else if ((grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_ready == 1'b1)) begin
            grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_index1_reg_48 <= 2'd0;
    end else if (((icmp_ln42_fu_71_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_index1_reg_48 <= in_index_fu_65_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((layer7_out_full_n == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((layer7_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((layer7_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        layer5_out_read = grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_layer5_out_read;
    end else begin
        layer5_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        layer7_out_blk_n = layer7_out_full_n;
    end else begin
        layer7_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer7_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        layer7_out_write = 1'b1;
    end else begin
        layer7_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln42_fu_71_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((layer7_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call3 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_start = grp_dense_array_array_ap_fixed_16_6_5_3_0_1u_config7_Pipeline_DataPrepare_fu_59_ap_start_reg;

assign icmp_ln42_fu_71_p2 = ((in_index1_reg_48 == 2'd3) ? 1'b1 : 1'b0);

assign in_index_fu_65_p2 = (in_index1_reg_48 + 2'd1);

assign layer7_out_din = 16'd0;

assign start_out = real_start;

endmodule //myproject_dense_array_ap_fixed_10u_array_ap_fixed_16_6_5_3_0_1u_config7_s
