// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_sigmoid_array_array_ap_fixed_16_6_5_3_0_1u_sigmoid_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer7_out_dout,
        layer7_out_num_data_valid,
        layer7_out_fifo_cap,
        layer7_out_empty_n,
        layer7_out_read,
        layer8_out_TDATA,
        layer8_out_TVALID,
        layer8_out_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] layer7_out_dout;
input  [1:0] layer7_out_num_data_valid;
input  [1:0] layer7_out_fifo_cap;
input   layer7_out_empty_n;
output   layer7_out_read;
output  [15:0] layer8_out_TDATA;
output   layer8_out_TVALID;
input   layer8_out_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer7_out_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] sigmoid_table_address0;
reg    sigmoid_table_ce0;
wire   [9:0] sigmoid_table_q0;
reg    layer7_out_blk_n;
reg    layer8_out_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [11:0] tmp_2_reg_225;
reg    ap_block_state1;
wire   [0:0] icmp_ln90_fu_106_p2;
reg   [0:0] icmp_ln90_reg_230;
wire   [0:0] icmp_ln90_1_fu_124_p2;
reg   [0:0] icmp_ln90_1_reg_235;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln96_fu_215_p1;
wire   [25:0] shl_ln_fu_88_p3;
wire   [3:0] trunc_ln90_fu_112_p1;
wire   [9:0] tmp_1_fu_116_p3;
wire  signed [12:0] sext_ln90_fu_130_p1;
wire   [12:0] add_ln90_fu_133_p2;
wire   [12:0] select_ln90_fu_139_p3;
wire   [12:0] data_round_fu_146_p3;
wire   [12:0] index_fu_153_p2;
wire   [2:0] tmp_3_fu_171_p4;
wire   [0:0] tmp_fu_163_p3;
wire   [0:0] xor_ln92_fu_187_p2;
wire   [0:0] icmp_ln94_fu_181_p2;
wire   [0:0] or_ln92_fu_201_p2;
wire   [9:0] select_ln92_fu_193_p3;
wire   [9:0] trunc_ln91_fu_159_p1;
wire   [9:0] index_1_fu_207_p3;
wire    regslice_both_layer8_out_U_apdone_blk;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire   [15:0] layer8_out_TDATA_int_regslice;
reg    layer8_out_TVALID_int_regslice;
wire    layer8_out_TREADY_int_regslice;
wire    regslice_both_layer8_out_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

myproject_sigmoid_array_array_ap_fixed_16_6_5_3_0_1u_sigmoid_config8_s_sigmoid_table_ROeOg #(
    .DataWidth( 10 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
sigmoid_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sigmoid_table_address0),
    .ce0(sigmoid_table_ce0),
    .q0(sigmoid_table_q0)
);

myproject_regslice_both #(
    .DataWidth( 16 ))
regslice_both_layer8_out_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(layer8_out_TDATA_int_regslice),
    .vld_in(layer8_out_TVALID_int_regslice),
    .ack_in(layer8_out_TREADY_int_regslice),
    .data_out(layer8_out_TDATA),
    .vld_out(regslice_both_layer8_out_U_vld_out),
    .ack_out(layer8_out_TREADY),
    .apdone_blk(regslice_both_layer8_out_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state4) | (layer8_out_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln90_1_reg_235 <= icmp_ln90_1_fu_124_p2;
        icmp_ln90_reg_230 <= icmp_ln90_fu_106_p2;
        tmp_2_reg_225 <= {{layer7_out_dout[15:4]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((layer8_out_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state4) | (layer8_out_TREADY_int_regslice == 1'b0))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4) | (layer8_out_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state4) | (layer8_out_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer7_out_blk_n = layer7_out_empty_n;
    end else begin
        layer7_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer7_out_read = 1'b1;
    end else begin
        layer7_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        layer8_out_TDATA_blk_n = layer8_out_TREADY_int_regslice;
    end else begin
        layer8_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer8_out_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        layer8_out_TVALID_int_regslice = 1'b1;
    end else begin
        layer8_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sigmoid_table_ce0 = 1'b1;
    end else begin
        sigmoid_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((layer8_out_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((1'b1 == ap_block_state4) | (layer8_out_TREADY_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln90_fu_133_p2 = ($signed(sext_ln90_fu_130_p1) + $signed(13'd1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (layer7_out_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4 = ((layer8_out_TREADY_int_regslice == 1'b0) | (regslice_both_layer8_out_U_apdone_blk == 1'b1));
end

assign data_round_fu_146_p3 = ((icmp_ln90_reg_230[0:0] == 1'b1) ? select_ln90_fu_139_p3 : sext_ln90_fu_130_p1);

assign icmp_ln90_1_fu_124_p2 = ((tmp_1_fu_116_p3 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_106_p2 = (($signed(shl_ln_fu_88_p3) < $signed(26'd67108849)) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_181_p2 = ((tmp_3_fu_171_p4 != 3'd0) ? 1'b1 : 1'b0);

assign index_1_fu_207_p3 = ((or_ln92_fu_201_p2[0:0] == 1'b1) ? select_ln92_fu_193_p3 : trunc_ln91_fu_159_p1);

assign index_fu_153_p2 = (data_round_fu_146_p3 + 13'd512);

assign layer8_out_TDATA_int_regslice = sigmoid_table_q0;

assign layer8_out_TVALID = regslice_both_layer8_out_U_vld_out;

assign or_ln92_fu_201_p2 = (tmp_fu_163_p3 | icmp_ln94_fu_181_p2);

assign select_ln90_fu_139_p3 = ((icmp_ln90_1_reg_235[0:0] == 1'b1) ? sext_ln90_fu_130_p1 : add_ln90_fu_133_p2);

assign select_ln92_fu_193_p3 = ((xor_ln92_fu_187_p2[0:0] == 1'b1) ? 10'd1023 : 10'd0);

assign sext_ln90_fu_130_p1 = $signed(tmp_2_reg_225);

assign shl_ln_fu_88_p3 = {{layer7_out_dout}, {10'd0}};

assign sigmoid_table_address0 = zext_ln96_fu_215_p1;

assign tmp_1_fu_116_p3 = {{trunc_ln90_fu_112_p1}, {6'd0}};

assign tmp_3_fu_171_p4 = {{index_fu_153_p2[12:10]}};

assign tmp_fu_163_p3 = index_fu_153_p2[32'd12];

assign trunc_ln90_fu_112_p1 = layer7_out_dout[3:0];

assign trunc_ln91_fu_159_p1 = index_fu_153_p2[9:0];

assign xor_ln92_fu_187_p2 = (tmp_fu_163_p3 ^ 1'd1);

assign zext_ln96_fu_215_p1 = index_1_fu_207_p3;

endmodule //myproject_sigmoid_array_array_ap_fixed_16_6_5_3_0_1u_sigmoid_config8_s
