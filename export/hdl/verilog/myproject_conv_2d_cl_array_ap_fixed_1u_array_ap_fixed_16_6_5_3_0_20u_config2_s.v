// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_20u_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        input_1_TDATA,
        input_1_TVALID,
        input_1_TREADY,
        layer2_out_din,
        layer2_out_num_data_valid,
        layer2_out_fifo_cap,
        layer2_out_full_n,
        layer2_out_write,
        w2_Addr_A,
        w2_EN_A,
        w2_WEN_A,
        w2_Din_A,
        w2_Dout_A,
        w2_Addr_B,
        w2_EN_B,
        w2_WEN_B,
        w2_Din_B,
        w2_Dout_B,
        b2_0,
        b2_1,
        b2_2,
        b2_3,
        b2_4,
        b2_5,
        b2_6,
        b2_7,
        b2_8,
        b2_9,
        b2_10,
        b2_11,
        b2_12,
        b2_13,
        b2_14,
        b2_15,
        b2_16,
        b2_17,
        b2_18,
        b2_19
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] input_1_TDATA;
input   input_1_TVALID;
output   input_1_TREADY;
output  [319:0] layer2_out_din;
input  [8:0] layer2_out_num_data_valid;
input  [8:0] layer2_out_fifo_cap;
input   layer2_out_full_n;
output   layer2_out_write;
output  [31:0] w2_Addr_A;
output   w2_EN_A;
output  [1:0] w2_WEN_A;
output  [15:0] w2_Din_A;
input  [15:0] w2_Dout_A;
output  [31:0] w2_Addr_B;
output   w2_EN_B;
output  [1:0] w2_WEN_B;
output  [15:0] w2_Din_B;
input  [15:0] w2_Dout_B;
input  [15:0] b2_0;
input  [15:0] b2_1;
input  [15:0] b2_2;
input  [15:0] b2_3;
input  [15:0] b2_4;
input  [15:0] b2_5;
input  [15:0] b2_6;
input  [15:0] b2_7;
input  [15:0] b2_8;
input  [15:0] b2_9;
input  [15:0] b2_10;
input  [15:0] b2_11;
input  [15:0] b2_12;
input  [15:0] b2_13;
input  [15:0] b2_14;
input  [15:0] b2_15;
input  [15:0] b2_16;
input  [15:0] b2_17;
input  [15:0] b2_18;
input  [15:0] b2_19;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer2_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    input_1_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln24_fu_442_p2;
reg    ap_block_state1;
reg   [15:0] input_1_read_reg_569;
reg    ap_block_state2;
wire    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start;
wire    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_done;
wire    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_idle;
wire    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_ready;
wire   [319:0] grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_layer2_out_din;
wire    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_layer2_out_write;
wire   [31:0] grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Addr_A;
wire    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_EN_A;
wire   [1:0] grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_WEN_A;
wire   [15:0] grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Din_A;
wire   [31:0] grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Addr_B;
wire    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_EN_B;
wire   [1:0] grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_WEN_B;
wire   [15:0] grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Din_B;
reg    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start_reg;
reg    ap_block_state2_ignore_call4;
wire    ap_CS_fsm_state3;
reg   [10:0] indvar_flatten_fu_180;
wire   [10:0] add_ln24_fu_448_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    regslice_both_input_1_U_apdone_blk;
wire   [15:0] input_1_TDATA_int_regslice;
wire    input_1_TVALID_int_regslice;
reg    input_1_TREADY_int_regslice;
wire    regslice_both_input_1_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start_reg = 1'b0;
#0 indvar_flatten_fu_180 = 11'd0;
end

myproject_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start),
    .ap_done(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_done),
    .ap_idle(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_idle),
    .ap_ready(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_ready),
    .in_elem_0_0_0_0_0_val(input_1_read_reg_569),
    .layer2_out_din(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_layer2_out_din),
    .layer2_out_num_data_valid(9'd0),
    .layer2_out_fifo_cap(9'd0),
    .layer2_out_full_n(layer2_out_full_n),
    .layer2_out_write(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_layer2_out_write),
    .w2_Addr_A(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Addr_A),
    .w2_EN_A(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_EN_A),
    .w2_WEN_A(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_WEN_A),
    .w2_Din_A(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Din_A),
    .w2_Dout_A(w2_Dout_A),
    .w2_Addr_B(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Addr_B),
    .w2_EN_B(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_EN_B),
    .w2_WEN_B(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_WEN_B),
    .w2_Din_B(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Din_B),
    .w2_Dout_B(w2_Dout_B),
    .biases_0_val1(b2_0),
    .biases_1_val2(b2_1),
    .biases_2_val3(b2_2),
    .biases_3_val4(b2_3),
    .biases_4_val5(b2_4),
    .biases_5_val6(b2_5),
    .biases_6_val7(b2_6),
    .biases_7_val8(b2_7),
    .biases_8_val9(b2_8),
    .biases_9_val10(b2_9),
    .biases_10_val11(b2_10),
    .biases_11_val12(b2_11),
    .biases_12_val13(b2_12),
    .biases_13_val14(b2_13),
    .biases_14_val15(b2_14),
    .biases_15_val16(b2_15),
    .biases_16_val17(b2_16),
    .biases_17_val18(b2_17),
    .biases_18_val19(b2_18),
    .biases_19_val20(b2_19)
);

myproject_regslice_both #(
    .DataWidth( 16 ))
regslice_both_input_1_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_1_TDATA),
    .vld_in(input_1_TVALID),
    .ack_in(regslice_both_input_1_U_ack_in),
    .data_out(input_1_TDATA_int_regslice),
    .vld_out(input_1_TVALID_int_regslice),
    .ack_out(input_1_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_1_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state2) & (icmp_ln24_fu_442_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_ignore_call4) & (icmp_ln24_fu_442_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start_reg <= 1'b1;
        end else if ((grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_ready == 1'b1)) begin
            grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_fu_180 <= 11'd0;
    end else if (((1'b0 == ap_block_state2) & (icmp_ln24_fu_442_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_fu_180 <= add_ln24_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
        input_1_read_reg_569 <= input_1_TDATA_int_regslice;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln24_fu_442_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_442_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_1_TDATA_blk_n = input_1_TVALID_int_regslice;
    end else begin
        input_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln24_fu_442_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_1_TREADY_int_regslice = 1'b1;
    end else begin
        input_1_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln24_fu_442_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        layer2_out_write = grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_layer2_out_write;
    end else begin
        layer2_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2) & (icmp_ln24_fu_442_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state2) & (icmp_ln24_fu_442_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_fu_448_p2 = (indvar_flatten_fu_180 + 11'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln24_fu_442_p2 == 1'd0) & (input_1_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_ignore_call4 = ((icmp_ln24_fu_442_p2 == 1'd0) & (input_1_TVALID_int_regslice == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start = grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start_reg;

assign icmp_ln24_fu_442_p2 = ((indvar_flatten_fu_180 == 11'd1024) ? 1'b1 : 1'b0);

assign input_1_TREADY = regslice_both_input_1_U_ack_in;

assign layer2_out_din = grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_layer2_out_din;

assign start_out = real_start;

assign w2_Addr_A = grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Addr_A;

assign w2_Addr_B = grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Addr_B;

assign w2_Din_A = 16'd0;

assign w2_Din_B = 16'd0;

assign w2_EN_A = grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_EN_A;

assign w2_EN_B = grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_EN_B;

assign w2_WEN_A = 2'd0;

assign w2_WEN_B = 2'd0;

endmodule //myproject_conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_20u_config2_s
