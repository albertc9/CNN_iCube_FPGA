// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_10u_array_ap_fixed_16_6_5_3_0_10u_relu_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer4_out_dout,
        layer4_out_num_data_valid,
        layer4_out_fifo_cap,
        layer4_out_empty_n,
        layer4_out_read,
        layer5_out_din,
        layer5_out_num_data_valid,
        layer5_out_fifo_cap,
        layer5_out_full_n,
        layer5_out_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [159:0] layer4_out_dout;
input  [8:0] layer4_out_num_data_valid;
input  [8:0] layer4_out_fifo_cap;
input   layer4_out_empty_n;
output   layer4_out_read;
output  [159:0] layer5_out_din;
input  [8:0] layer5_out_num_data_valid;
input  [8:0] layer5_out_fifo_cap;
input   layer5_out_full_n;
output   layer5_out_write;

reg ap_idle;
reg layer4_out_read;
reg layer5_out_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln41_fu_125_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer4_out_blk_n;
wire    ap_block_pp0_stage0;
reg    layer5_out_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [14:0] out_data_8_fu_336_p3;
reg   [14:0] out_data_8_reg_536;
wire   [14:0] out_data_10_fu_350_p3;
reg   [14:0] out_data_10_reg_541;
wire   [14:0] out_data_12_fu_364_p3;
reg   [14:0] out_data_12_reg_546;
wire   [14:0] out_data_14_fu_378_p3;
reg   [14:0] out_data_14_reg_551;
wire   [14:0] select_ln51_fu_392_p3;
reg   [14:0] select_ln51_reg_556;
wire   [14:0] select_ln51_16_fu_406_p3;
reg   [14:0] select_ln51_16_reg_561;
wire   [14:0] select_ln51_17_fu_420_p3;
reg   [14:0] select_ln51_17_reg_566;
wire   [14:0] select_ln51_18_fu_434_p3;
reg   [14:0] select_ln51_18_reg_571;
wire   [14:0] select_ln51_19_fu_448_p3;
reg   [14:0] select_ln51_19_reg_576;
wire   [14:0] select_ln51_20_fu_462_p3;
reg   [14:0] select_ln51_20_reg_581;
reg   [7:0] i_fu_100;
wire   [7:0] i_4_fu_131_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_3;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] in_data_fu_142_p1;
wire   [0:0] icmp_ln51_fu_330_p2;
wire   [14:0] trunc_ln44_45_fu_146_p1;
wire   [15:0] in_data_10_fu_150_p4;
wire   [0:0] icmp_ln51_20_fu_344_p2;
wire   [14:0] trunc_ln44_s_fu_160_p4;
wire   [15:0] in_data_11_fu_170_p4;
wire   [0:0] icmp_ln51_21_fu_358_p2;
wire   [14:0] trunc_ln44_35_fu_180_p4;
wire   [15:0] in_data_12_fu_190_p4;
wire   [0:0] icmp_ln51_22_fu_372_p2;
wire   [14:0] trunc_ln44_36_fu_200_p4;
wire   [15:0] trunc_ln44_23_fu_210_p4;
wire   [0:0] icmp_ln51_23_fu_386_p2;
wire   [14:0] trunc_ln44_37_fu_220_p4;
wire   [15:0] trunc_ln44_24_fu_230_p4;
wire   [0:0] icmp_ln51_24_fu_400_p2;
wire   [14:0] trunc_ln44_38_fu_240_p4;
wire   [15:0] trunc_ln44_25_fu_250_p4;
wire   [0:0] icmp_ln51_25_fu_414_p2;
wire   [14:0] trunc_ln44_39_fu_260_p4;
wire   [15:0] trunc_ln44_26_fu_270_p4;
wire   [0:0] icmp_ln51_26_fu_428_p2;
wire   [14:0] trunc_ln44_40_fu_280_p4;
wire   [15:0] trunc_ln44_27_fu_290_p4;
wire   [0:0] icmp_ln51_27_fu_442_p2;
wire   [14:0] trunc_ln44_41_fu_300_p4;
wire   [15:0] trunc_ln44_28_fu_310_p4;
wire   [0:0] icmp_ln51_28_fu_456_p2;
wire   [14:0] trunc_ln44_42_fu_320_p4;
wire   [15:0] zext_ln51_18_fu_494_p1;
wire   [15:0] zext_ln51_17_fu_491_p1;
wire   [15:0] zext_ln51_16_fu_488_p1;
wire   [15:0] zext_ln51_15_fu_485_p1;
wire   [15:0] zext_ln51_fu_482_p1;
wire   [15:0] zext_ln45_6_fu_479_p1;
wire   [15:0] zext_ln45_5_fu_476_p1;
wire   [15:0] zext_ln45_4_fu_473_p1;
wire   [15:0] zext_ln45_fu_470_p1;
wire   [158:0] or_ln57_s_fu_497_p11;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_119;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 i_fu_100 = 8'd0;
end

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_119)) begin
        if ((icmp_ln41_fu_125_p2 == 1'd0)) begin
            i_fu_100 <= i_4_fu_131_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_100 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        out_data_10_reg_541 <= out_data_10_fu_350_p3;
        out_data_12_reg_546 <= out_data_12_fu_364_p3;
        out_data_14_reg_551 <= out_data_14_fu_378_p3;
        out_data_8_reg_536 <= out_data_8_fu_336_p3;
        select_ln51_16_reg_561 <= select_ln51_16_fu_406_p3;
        select_ln51_17_reg_566 <= select_ln51_17_fu_420_p3;
        select_ln51_18_reg_571 <= select_ln51_18_fu_434_p3;
        select_ln51_19_reg_576 <= select_ln51_19_fu_448_p3;
        select_ln51_20_reg_581 <= select_ln51_20_fu_462_p3;
        select_ln51_reg_556 <= select_ln51_fu_392_p3;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_125_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_3 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer4_out_blk_n = layer4_out_empty_n;
    end else begin
        layer4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer4_out_read = 1'b1;
    end else begin
        layer4_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer5_out_blk_n = layer5_out_full_n;
    end else begin
        layer5_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer5_out_write = 1'b1;
    end else begin
        layer5_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (layer4_out_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (layer5_out_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_119 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_4_fu_131_p2 = (ap_sig_allocacmp_i_3 + 8'd1);

assign icmp_ln41_fu_125_p2 = ((ap_sig_allocacmp_i_3 == 8'd238) ? 1'b1 : 1'b0);

assign icmp_ln51_20_fu_344_p2 = (($signed(in_data_10_fu_150_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_21_fu_358_p2 = (($signed(in_data_11_fu_170_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_22_fu_372_p2 = (($signed(in_data_12_fu_190_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_23_fu_386_p2 = (($signed(trunc_ln44_23_fu_210_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_24_fu_400_p2 = (($signed(trunc_ln44_24_fu_230_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_25_fu_414_p2 = (($signed(trunc_ln44_25_fu_250_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_26_fu_428_p2 = (($signed(trunc_ln44_26_fu_270_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_27_fu_442_p2 = (($signed(trunc_ln44_27_fu_290_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_28_fu_456_p2 = (($signed(trunc_ln44_28_fu_310_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_330_p2 = (($signed(in_data_fu_142_p1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign in_data_10_fu_150_p4 = {{layer4_out_dout[31:16]}};

assign in_data_11_fu_170_p4 = {{layer4_out_dout[47:32]}};

assign in_data_12_fu_190_p4 = {{layer4_out_dout[63:48]}};

assign in_data_fu_142_p1 = layer4_out_dout[15:0];

assign layer5_out_din = or_ln57_s_fu_497_p11;

assign or_ln57_s_fu_497_p11 = {{{{{{{{{{select_ln51_20_reg_581}, {zext_ln51_18_fu_494_p1}}, {zext_ln51_17_fu_491_p1}}, {zext_ln51_16_fu_488_p1}}, {zext_ln51_15_fu_485_p1}}, {zext_ln51_fu_482_p1}}, {zext_ln45_6_fu_479_p1}}, {zext_ln45_5_fu_476_p1}}, {zext_ln45_4_fu_473_p1}}, {zext_ln45_fu_470_p1}};

assign out_data_10_fu_350_p3 = ((icmp_ln51_20_fu_344_p2[0:0] == 1'b1) ? trunc_ln44_s_fu_160_p4 : 15'd0);

assign out_data_12_fu_364_p3 = ((icmp_ln51_21_fu_358_p2[0:0] == 1'b1) ? trunc_ln44_35_fu_180_p4 : 15'd0);

assign out_data_14_fu_378_p3 = ((icmp_ln51_22_fu_372_p2[0:0] == 1'b1) ? trunc_ln44_36_fu_200_p4 : 15'd0);

assign out_data_8_fu_336_p3 = ((icmp_ln51_fu_330_p2[0:0] == 1'b1) ? trunc_ln44_45_fu_146_p1 : 15'd0);

assign select_ln51_16_fu_406_p3 = ((icmp_ln51_24_fu_400_p2[0:0] == 1'b1) ? trunc_ln44_38_fu_240_p4 : 15'd0);

assign select_ln51_17_fu_420_p3 = ((icmp_ln51_25_fu_414_p2[0:0] == 1'b1) ? trunc_ln44_39_fu_260_p4 : 15'd0);

assign select_ln51_18_fu_434_p3 = ((icmp_ln51_26_fu_428_p2[0:0] == 1'b1) ? trunc_ln44_40_fu_280_p4 : 15'd0);

assign select_ln51_19_fu_448_p3 = ((icmp_ln51_27_fu_442_p2[0:0] == 1'b1) ? trunc_ln44_41_fu_300_p4 : 15'd0);

assign select_ln51_20_fu_462_p3 = ((icmp_ln51_28_fu_456_p2[0:0] == 1'b1) ? trunc_ln44_42_fu_320_p4 : 15'd0);

assign select_ln51_fu_392_p3 = ((icmp_ln51_23_fu_386_p2[0:0] == 1'b1) ? trunc_ln44_37_fu_220_p4 : 15'd0);

assign trunc_ln44_23_fu_210_p4 = {{layer4_out_dout[79:64]}};

assign trunc_ln44_24_fu_230_p4 = {{layer4_out_dout[95:80]}};

assign trunc_ln44_25_fu_250_p4 = {{layer4_out_dout[111:96]}};

assign trunc_ln44_26_fu_270_p4 = {{layer4_out_dout[127:112]}};

assign trunc_ln44_27_fu_290_p4 = {{layer4_out_dout[143:128]}};

assign trunc_ln44_28_fu_310_p4 = {{layer4_out_dout[159:144]}};

assign trunc_ln44_35_fu_180_p4 = {{layer4_out_dout[46:32]}};

assign trunc_ln44_36_fu_200_p4 = {{layer4_out_dout[62:48]}};

assign trunc_ln44_37_fu_220_p4 = {{layer4_out_dout[78:64]}};

assign trunc_ln44_38_fu_240_p4 = {{layer4_out_dout[94:80]}};

assign trunc_ln44_39_fu_260_p4 = {{layer4_out_dout[110:96]}};

assign trunc_ln44_40_fu_280_p4 = {{layer4_out_dout[126:112]}};

assign trunc_ln44_41_fu_300_p4 = {{layer4_out_dout[142:128]}};

assign trunc_ln44_42_fu_320_p4 = {{layer4_out_dout[158:144]}};

assign trunc_ln44_45_fu_146_p1 = layer4_out_dout[14:0];

assign trunc_ln44_s_fu_160_p4 = {{layer4_out_dout[30:16]}};

assign zext_ln45_4_fu_473_p1 = out_data_10_reg_541;

assign zext_ln45_5_fu_476_p1 = out_data_12_reg_546;

assign zext_ln45_6_fu_479_p1 = out_data_14_reg_551;

assign zext_ln45_fu_470_p1 = out_data_8_reg_536;

assign zext_ln51_15_fu_485_p1 = select_ln51_16_reg_561;

assign zext_ln51_16_fu_488_p1 = select_ln51_17_reg_566;

assign zext_ln51_17_fu_491_p1 = select_ln51_18_reg_571;

assign zext_ln51_18_fu_494_p1 = select_ln51_19_reg_576;

assign zext_ln51_fu_482_p1 = select_ln51_reg_556;

endmodule //myproject_relu_array_ap_fixed_10u_array_ap_fixed_16_6_5_3_0_10u_relu_config5_s
