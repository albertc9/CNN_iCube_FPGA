-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_20u_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    input_1_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    input_1_TVALID : IN STD_LOGIC;
    input_1_TREADY : OUT STD_LOGIC;
    layer2_out_din : OUT STD_LOGIC_VECTOR (319 downto 0);
    layer2_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer2_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer2_out_full_n : IN STD_LOGIC;
    layer2_out_write : OUT STD_LOGIC;
    w2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    w2_EN_A : OUT STD_LOGIC;
    w2_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    w2_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    w2_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    w2_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    w2_EN_B : OUT STD_LOGIC;
    w2_WEN_B : OUT STD_LOGIC_VECTOR (1 downto 0);
    w2_Din_B : OUT STD_LOGIC_VECTOR (15 downto 0);
    w2_Dout_B : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_16 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_17 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_18 : IN STD_LOGIC_VECTOR (15 downto 0);
    b2_19 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of myproject_conv_2d_cl_array_ap_fixed_1u_array_ap_fixed_16_6_5_3_0_20u_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal input_1_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln24_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal input_1_read_reg_569 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_done : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_idle : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_ready : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_layer2_out_din : STD_LOGIC_VECTOR (319 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_layer2_out_write : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_EN_A : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_WEN_A : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Din_A : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Addr_B : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_EN_B : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_WEN_B : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Din_B : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state2_ignore_call4 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal indvar_flatten_fu_180 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln24_fu_448_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal regslice_both_input_1_U_apdone_blk : STD_LOGIC;
    signal input_1_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal input_1_TVALID_int_regslice : STD_LOGIC;
    signal input_1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_1_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_elem_0_0_0_0_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
        layer2_out_din : OUT STD_LOGIC_VECTOR (319 downto 0);
        layer2_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        layer2_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        layer2_out_full_n : IN STD_LOGIC;
        layer2_out_write : OUT STD_LOGIC;
        w2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        w2_EN_A : OUT STD_LOGIC;
        w2_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
        w2_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
        w2_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
        w2_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
        w2_EN_B : OUT STD_LOGIC;
        w2_WEN_B : OUT STD_LOGIC_VECTOR (1 downto 0);
        w2_Din_B : OUT STD_LOGIC_VECTOR (15 downto 0);
        w2_Dout_B : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_0_val1 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_1_val2 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_2_val3 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_3_val4 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_4_val5 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_5_val6 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_6_val7 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_7_val8 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_8_val9 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_9_val10 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_10_val11 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_11_val12 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_12_val13 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_13_val14 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_14_val15 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_15_val16 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_16_val17 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_17_val18 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_18_val19 : IN STD_LOGIC_VECTOR (15 downto 0);
        biases_19_val20 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310 : component myproject_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start,
        ap_done => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_done,
        ap_idle => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_idle,
        ap_ready => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_ready,
        in_elem_0_0_0_0_0_val => input_1_read_reg_569,
        layer2_out_din => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_layer2_out_din,
        layer2_out_num_data_valid => ap_const_lv9_0,
        layer2_out_fifo_cap => ap_const_lv9_0,
        layer2_out_full_n => layer2_out_full_n,
        layer2_out_write => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_layer2_out_write,
        w2_Addr_A => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Addr_A,
        w2_EN_A => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_EN_A,
        w2_WEN_A => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_WEN_A,
        w2_Din_A => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Din_A,
        w2_Dout_A => w2_Dout_A,
        w2_Addr_B => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Addr_B,
        w2_EN_B => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_EN_B,
        w2_WEN_B => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_WEN_B,
        w2_Din_B => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Din_B,
        w2_Dout_B => w2_Dout_B,
        biases_0_val1 => b2_0,
        biases_1_val2 => b2_1,
        biases_2_val3 => b2_2,
        biases_3_val4 => b2_3,
        biases_4_val5 => b2_4,
        biases_5_val6 => b2_5,
        biases_6_val7 => b2_6,
        biases_7_val8 => b2_7,
        biases_8_val9 => b2_8,
        biases_9_val10 => b2_9,
        biases_10_val11 => b2_10,
        biases_11_val12 => b2_11,
        biases_12_val13 => b2_12,
        biases_13_val14 => b2_13,
        biases_14_val15 => b2_14,
        biases_15_val16 => b2_15,
        biases_16_val17 => b2_16,
        biases_17_val18 => b2_17,
        biases_18_val19 => b2_18,
        biases_19_val20 => b2_19);

    regslice_both_input_1_U : component myproject_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => input_1_TDATA,
        vld_in => input_1_TVALID,
        ack_in => regslice_both_input_1_U_ack_in,
        data_out => input_1_TDATA_int_regslice,
        vld_out => input_1_TVALID_int_regslice,
        ack_out => input_1_TREADY_int_regslice,
        apdone_blk => regslice_both_input_1_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln24_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_ignore_call4) and (icmp_ln24_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_ready = ap_const_logic_1)) then 
                    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_180 <= ap_const_lv11_0;
            elsif (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln24_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_fu_180 <= add_ln24_fu_448_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                input_1_read_reg_569 <= input_1_TDATA_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_fu_442_p2, ap_block_state1, ap_block_state2, grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln24_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln24_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln24_fu_448_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_180) + unsigned(ap_const_lv11_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2)
    begin
        if ((ap_const_boolean_1 = ap_block_state2)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_done)
    begin
        if ((grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln24_fu_442_p2, input_1_TVALID_int_regslice)
    begin
                ap_block_state2 <= ((icmp_ln24_fu_442_p2 = ap_const_lv1_0) and (input_1_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state2_ignore_call4_assign_proc : process(icmp_ln24_fu_442_p2, input_1_TVALID_int_regslice)
    begin
                ap_block_state2_ignore_call4 <= ((icmp_ln24_fu_442_p2 = ap_const_lv1_0) and (input_1_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln24_fu_442_p2, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln24_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_ap_start_reg;
    icmp_ln24_fu_442_p2 <= "1" when (indvar_flatten_fu_180 = ap_const_lv11_400) else "0";

    input_1_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln24_fu_442_p2, input_1_TVALID_int_regslice)
    begin
        if (((icmp_ln24_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_1_TDATA_blk_n <= input_1_TVALID_int_regslice;
        else 
            input_1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_1_TREADY <= regslice_both_input_1_U_ack_in;

    input_1_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, icmp_ln24_fu_442_p2, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln24_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_1_TREADY_int_regslice <= ap_const_logic_1;
        else 
            input_1_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln24_fu_442_p2, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln24_fu_442_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    layer2_out_din <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_layer2_out_din;

    layer2_out_write_assign_proc : process(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_layer2_out_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            layer2_out_write <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_layer2_out_write;
        else 
            layer2_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    w2_Addr_A <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Addr_A;
    w2_Addr_B <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_Addr_B;
    w2_Din_A <= ap_const_lv16_0;
    w2_Din_B <= ap_const_lv16_0;
    w2_EN_A <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_EN_A;
    w2_EN_B <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s_fu_310_w2_EN_B;
    w2_WEN_A <= ap_const_lv2_0;
    w2_WEN_B <= ap_const_lv2_0;
end behav;
