// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_elem_0_0_0_0_0_val,
        layer2_out_din,
        layer2_out_num_data_valid,
        layer2_out_fifo_cap,
        layer2_out_full_n,
        layer2_out_write,
        layer2_out_blk_n
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] in_elem_0_0_0_0_0_val;
output  [319:0] layer2_out_din;
input  [8:0] layer2_out_num_data_valid;
input  [8:0] layer2_out_fifo_cap;
input   layer2_out_full_n;
output   layer2_out_write;
output   layer2_out_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer2_out_write;
reg layer2_out_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] sX;
reg   [31:0] sY;
reg   [31:0] pY;
reg   [31:0] pX;
wire   [0:0] icmp_ln289_fu_90_p2;
wire   [0:0] and_ln289_1_fu_132_p2;
reg    call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_start;
wire    call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_done;
wire    call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_idle;
wire    call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_ready;
wire   [31:0] select_ln323_fu_218_p3;
reg   [31:0] ap_phi_mux_storemerge_phi_fu_67_p4;
reg    ap_predicate_op17_write_state1;
reg    ap_block_state1;
wire   [0:0] icmp_ln313_fu_144_p2;
wire   [0:0] icmp_ln317_fu_194_p2;
reg    ap_block_state1_ignore_call2;
wire   [31:0] select_ln328_fu_162_p3;
wire   [31:0] add_ln317_fu_188_p2;
wire   [31:0] add_ln313_fu_138_p2;
wire   [0:0] icmp_ln289_2_fu_114_p2;
wire   [0:0] icmp_ln289_3_fu_120_p2;
wire   [0:0] and_ln289_fu_126_p2;
wire   [0:0] icmp_ln289_1_fu_108_p2;
wire   [31:0] add_ln328_fu_156_p2;
wire   [0:0] icmp_ln323_fu_206_p2;
wire   [31:0] add_ln323_fu_212_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_condition_120;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 sX = 32'd0;
#0 sY = 32'd0;
#0 pY = 32'd0;
#0 pX = 32'd0;
end

myproject_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_start),
    .ap_done(call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_done),
    .ap_idle(call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_idle),
    .ap_ready(call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_ready),
    .in_elem_0_0_0_0_0_val(in_elem_0_0_0_0_0_val)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln313_fu_144_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((icmp_ln313_fu_144_p2 == 1'd0)) begin
            pX <= add_ln313_fu_138_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_120)) begin
        if ((icmp_ln317_fu_194_p2 == 1'd1)) begin
            pY <= 32'd0;
        end else if ((icmp_ln317_fu_194_p2 == 1'd0)) begin
            pY <= add_ln317_fu_188_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln313_fu_144_p2 == 1'd1)) begin
            sX <= 32'd0;
        end else if ((icmp_ln313_fu_144_p2 == 1'd0)) begin
            sX <= select_ln328_fu_162_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln313_fu_144_p2 == 1'd1) & (1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        sY <= ap_phi_mux_storemerge_phi_fu_67_p4;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln313_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln317_fu_194_p2 == 1'd1)) begin
            ap_phi_mux_storemerge_phi_fu_67_p4 = 32'd0;
        end else if ((icmp_ln317_fu_194_p2 == 1'd0)) begin
            ap_phi_mux_storemerge_phi_fu_67_p4 = select_ln323_fu_218_p3;
        end else begin
            ap_phi_mux_storemerge_phi_fu_67_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge_phi_fu_67_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_ignore_call2) & (1'b1 == ap_CS_fsm_state1))) begin
        call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_start = 1'b1;
    end else begin
        call_ln286_shift_line_buffer_array_ap_fixed_16_6_5_3_0_1u_config2_s_fu_74_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'd1 == and_ln289_1_fu_132_p2) & (icmp_ln289_fu_90_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_blk_n = layer2_out_full_n;
    end else begin
        layer2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (ap_predicate_op17_write_state1 == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_write = 1'b1;
    end else begin
        layer2_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln313_fu_138_p2 = (pX + 32'd1);

assign add_ln317_fu_188_p2 = (pY + 32'd1);

assign add_ln323_fu_212_p2 = (sY + 32'd1);

assign add_ln328_fu_156_p2 = (sX + 32'd1);

assign and_ln289_1_fu_132_p2 = (icmp_ln289_1_fu_108_p2 & and_ln289_fu_126_p2);

assign and_ln289_fu_126_p2 = (icmp_ln289_3_fu_120_p2 & icmp_ln289_2_fu_114_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | ((ap_predicate_op17_write_state1 == 1'b1) & (layer2_out_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1_ignore_call2 = ((ap_start == 1'b0) | ((ap_predicate_op17_write_state1 == 1'b1) & (layer2_out_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_120 = ((icmp_ln313_fu_144_p2 == 1'd1) & (1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1));
end

always @ (*) begin
    ap_predicate_op17_write_state1 = ((1'd1 == and_ln289_1_fu_132_p2) & (icmp_ln289_fu_90_p2 == 1'd1));
end

assign icmp_ln289_1_fu_108_p2 = ((sY == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln289_2_fu_114_p2 = (($signed(pY) > $signed(32'd2)) ? 1'b1 : 1'b0);

assign icmp_ln289_3_fu_120_p2 = (($signed(pX) > $signed(32'd8)) ? 1'b1 : 1'b0);

assign icmp_ln289_fu_90_p2 = ((sX == 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln313_fu_144_p2 = ((add_ln313_fu_138_p2 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln317_fu_194_p2 = ((add_ln317_fu_188_p2 == 32'd4) ? 1'b1 : 1'b0);

assign icmp_ln323_fu_206_p2 = ((sY == 32'd3) ? 1'b1 : 1'b0);

assign layer2_out_din = 320'd0;

assign select_ln323_fu_218_p3 = ((icmp_ln323_fu_206_p2[0:0] == 1'b1) ? 32'd3 : add_ln323_fu_212_p2);

assign select_ln328_fu_162_p3 = ((icmp_ln289_fu_90_p2[0:0] == 1'b1) ? 32'd9 : add_ln328_fu_156_p2);

endmodule //myproject_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_20u_config2_s
